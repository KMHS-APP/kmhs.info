---
import Layout from '@/layouts/Layout.astro'
import { Icon } from 'astro-icon/components'
---

<Layout description="파일 업로드 페이지" title="파일 업로드">
    <div class="flex items-center justify-center min-h-screen bg-gray-100">
        <div class="bg-white p-8 rounded-lg shadow-lg transform transition-transform hover:scale-105">
            <h1 class="text-2xl font-bold mb-4">파일 업로드</h1>
            <form id="uploadForm" class="space-y-4">
                <input type="file" id="fileInput" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
                <p class="text-sm text-gray-500">최대 파일 크기: 25MB</p>
                <p class="text-sm text-gray-500">파일의 유효기한은 7일입니다.</p>
                <button type="button" id="uploadButton" onclick="uploadFile()" class="w-full py-2 px-4 bg-blue-500 text-white rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 flex items-center justify-center">
                    <Icon name="mdi:cloud-upload-outline" />
                    <svg id="loadingIcon" class="hidden animate-spin h-5 w-5 text-white ml-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
                    </svg>
                </button>
            </form>
            <p id="statusMessage" class="mt-4 text-center text-gray-600"></p>
            <p id="downloadUrl" class="mt-4 text-center text-blue-600"></p>
        </div>
    </div>
    <script is:inline>
        const MAX_FILE_SIZE = 25 * 1024 * 1024; // 25MB

        async function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const uploadButtonText = document.getElementById('uploadButtonText');
            const loadingIcon = document.getElementById('loadingIcon');
            if (!(fileInput instanceof HTMLInputElement)) {
                if (statusMessage) {
                    statusMessage.textContent = '파일 입력 요소를 찾을 수 없��니다.';
                }
                return;
            }
            const statusMessage = document.getElementById('statusMessage');
            const downloadUrl = document.getElementById('downloadUrl');
            if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                if (statusMessage) {
                    statusMessage.textContent = '파일을 선택해주세요.';
                }
                return;
            }
            const file = fileInput.files[0];
            if (file.size > MAX_FILE_SIZE) {
                if (statusMessage) {
                    statusMessage.textContent = '파일 크기가 25MB를 초과합니다.';
                }
                return;
            }

            // Show loading icon and hide button text
            if (uploadButtonText) {
                uploadButtonText.classList.add('hidden');
            }
            if (loadingIcon) {
                loadingIcon.classList.remove('hidden');
            }

            const url = `https://file.kmhs.info/${file.name}`;
            try {
                const response = await fetch(url, {
                    method: 'PUT',
                    headers: {
                    'X-Custom-Auth-Key': '29eabc03b430474075af4d107eab1964',
                    },
                    body: file
                });

                console.log(response);

                if (response.ok) {
                    const jsonResponse = await response.json();
                    if (statusMessage) {
                        statusMessage.textContent = '파일 업로드 성공!';
                    }
                    if (downloadUrl && jsonResponse.download_url) {
                        downloadUrl.textContent = `다운로드 URL: ${jsonResponse.download_url}`;
                    }
                } else {
                    if (statusMessage) {
                        statusMessage.textContent = '파일 업로드 실패!';
                    }
                }
            } catch (error) {
                if (statusMessage) {
                    statusMessage.textContent = '파일 업로드 중 오류 발생!';
                }
            } finally {
                // Hide loading icon and show button text
                if (uploadButtonText) {
                    uploadButtonText.classList.remove('hidden');
                }
                if (loadingIcon) {
                    loadingIcon.classList.add('hidden');
                }
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const uploadForm = document.getElementById('uploadForm');
            if (uploadForm) {
                uploadForm.addEventListener('submit', (event) => {
                    event.preventDefault();
                    uploadFile();
                });
            }
        });
    </script>
</Layout>
